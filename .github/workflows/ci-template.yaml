name: Ci

on:
  workflow_call:
    inputs:
      app:
        description: App to build
        required: true
        type: string
      platforms:
        description: Platforms to build
        required: false
        type: string
        # "['linux/amd64', 'linux/arm64', 'linux/arm/v7']"
        default: "['linux/amd64']"
      build-args:
        description: Docker build args
        required: false
        type: string
    secrets:
      dockerhub-username:
        description: Docker Hub username
        required: true
      dockerhub-token:
        description: Docker Hub token
        required: true

jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform: ${{ fromJson(inputs.platforms) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ github.repository }}-${{ inputs.app }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.dockerhub-username }}
          password: ${{ secrets.dockerhub-token }}

      - name: Normalize
        id: normalize
        run: echo "platform=$(echo ${{ matrix.platform }} | sed 's/\//-/g')" >> $GITHUB_OUTPUT

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: |
            /tmp/.buildx-cache
          key: |
            ${{ runner.os }}-${{ steps.normalize.outputs.platform }}-${{ inputs.app }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.normalize.outputs.platform }}-${{ inputs.app }}-
            ${{ runner.os }}-${{ steps.normalize.outputs.platform }}-
            ${{ runner.os }}-

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/${{ inputs.app }}/Dockerfile
          build-args: ${{ inputs.build-args }}
          builder: ${{ steps.buildx.outputs.name }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ github.repository }}-${{ inputs.app }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Export digest
        run: |
          DIGEST=${{ steps.build.outputs.digest }}
          DIGEST_DIR=/tmp/digests/${{ inputs.app }}
          mkdir -p $DIGEST_DIR
          touch "$DIGEST_DIR/${DIGEST#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ steps.normalize.outputs.platform }}-${{ inputs.app }}
          path: /tmp/digests/${{ inputs.app }}
          if-no-files-found: error
          retention-days: 1

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  merge:
    name: Push image
    runs-on: ubuntu-latest

    needs:
      - build

    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: digests-*-${{ inputs.app }}
          path: /tmp/digests/${{ inputs.app }}
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ github.repository }}-${{ inputs.app }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.dockerhub-username }}
          password: ${{ secrets.dockerhub-token }}

      - name: Create manifest list and push
        working-directory: /tmp/digests/${{ inputs.app }}
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ github.repository }}-${{ inputs.app }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ github.repository }}-${{ inputs.app }}:${{ steps.meta.outputs.version }}
